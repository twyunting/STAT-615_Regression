covid %>%
group_by(Lat, Long)
covid %>%
group_by(Province_State)
covid %>%
group_by(Province_State) %>%
unique()
covid %>%
group_by(Province_State) %>%
unique(Province_State)
covid %>%
group_by(Province_State)
covid %>%
group_by(Province_State) %>%
unique(Province_State)
covid %>%
group_by(Province_State) %>%
unique(Province_State)
covid %>%
group_by(Province_State)
covid %>%
group_by(Province_State) %>%
summarise(count = n())
covid %>%
group_by(Province_State)
covid %>%
group_by(Province_State, Lat, Long)
covid %>%
group_by(Province_State, Lat, Long) %>%
count()
covid %>%
filter(Long == 0)
covid %>%
group_by(Province_State, Lat, Long) %>%
count()
covid %>%
filter(Province_State == "Alabama")
covid %>%
group_by(Province_State, Lat, Long) %>%
count()
covid %>%
group_by(Province_State) %>%
count()
covid %>%
group_by(Province_State, Lat) %>%
count()
covid %>%
group_by(Province_State, Lat, Long) %>%
count()
covid %>%
group_by(Province_State, Lat, Long) %>%
count() %>%
count(Long)
covid %>%
group_by(Province_State, Lat, Long) %>%
count()
covid %>%
group_by(Province_State, Lat, Long) %>%
count() %>%
count(Lat)
covid %>%
group_by(Province_State, Lat, Long) %>%
count() %>%
count(Lat, Long)
covid %>%
group_by(Province_State, Lat, Long) %>%
count()
count()
covid %>%
group_by(Province_State, Lat, Long) %>%
filter(Province_State == "Alabama") %>%
count()
covid %>%
count(Province_State)
covid %>%
filter(Province_State == "Diamond Princess")
covidForRegression %>%
left_join(race, by = "State")
race
race %>%
rename(Province_State = State)
covidForRegression %>%
left_join(race, by = "State")
covidForRegression %>%
left_join(race, by = "Province_State")
race %>%
rename(Province_State = State)->race
covidForRegression %>%
left_join(race, by = "Province_State")
intersect(covidForRegression$Province_State, race$Province_State)
uniont(covidForRegression$Province_State, race$Province_State)
union(covidForRegression$Province_State, race$Province_State)
setdiff(covidForRegression$Province_State, race$Province_State)
setdiff(race$Province_State,covidForRegression$Province_State)
covidForRegression %>%
left_join(race, by = "Province_State")->covidForRegression_race
install.packages("readxl")
library(readxl)
knitr::opts_chunk$set(fig.align  = "center",
fig.height = 5,
fig.width  = 6)
# Installed library
library(tidyverse)
url_in <- "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/"
df <- tibble(file_names = c("time_series_covid19_confirmed_global.csv",
"time_series_covid19_deaths_global.csv",
"time_series_covid19_confirmed_US.csv",
"time_series_covid19_deaths_US.csv")) -> df
df %>%
mutate(url = str_c(url_in, file_names, sep = "")) -> df
df %>%
mutate(data = map(url, ~read_csv(., na = ""))) -> df
df %>%
mutate(case_types = as.factor(str_extract(file_names, "[:alpha:]*_[gU][:alpha:]*"))) ->
df
# alpha = Any letter, [A-Za-z]
# reference: https://www.petefreitag.com/cheatsheets/regex/character-classes/
df %>%
select(case_types, data) -> df
df %>%
mutate(vars = map(df$data, names)) -> df
# map(df$vars, ~unlist(.)[1:15]) for checking
fix_names <- function(df, pattern, rePattern){
stopifnot(is.data.frame(df), is.character(pattern), is.character(rePattern))
names(df) <- str_replace_all(names(df), pattern, rePattern)
return(df)
}
df %>%
mutate(data = map(data, ~fix_names(., "([ey])/", "\\1_")),
data = map(data, ~fix_names(., "Admin2", "County")),
data = map(data, ~fix_names(., "Long_", "Long")),
data = map_if(data, str_detect(df$case_types, "US"),
~select(., -c("UID", "iso2", "iso3",
"code3", "FIPS", "Combined_Key"))),
data = map_if(data, str_detect(df$case_types, "global"),
~mutate(., County = "NA")),
data = map_if(data, !str_detect(df$case_types, "deaths_US"),
~mutate(., Population = 0)),
data = map(data, ~unite(., "Country_State",
c("Country_Region", "Province_State"),
remove = FALSE, na.rm = TRUE,
sep = "_"))
) -> df
df %>%
mutate(vars = map(df$data, names)) -> df # synchronize the vars correspondingly
# map(df$vars, ~unlist(.)) # for checking
library(lubridate)
df %>%
mutate(data = map(data, ~pivot_longer(data = ., cols = contains("/"),
names_to = "Date",
values_to = "dailyValues",
names_transform = list(Date = mdy)))
) -> df
# df$data <- map(df$data, names) # synchronize the vars correspondingly
# map(df$vars, ~unlist(.)) # for checking
# crate a function to fix in type of Date
mdyDate <- function(df, varsDate){
# stopifnot(is.data.frame(df), is.character(varsDate))
df[[varsDate]] <- ymd(df[[varsDate]])
return(df)
}
df %>%
mutate(data = map(data, ~mdyDate(., "Date"))) -> df_long
# str(df_long) # check the data set
library(countrycode) # get the continents
df_long %>%
mutate(data = map(data, ~mutate(., Continent = countrycode(Country_Region,
origin = "country.name",
destination = "continent")))
) -> df_long
df_long %>%
mutate(data = map(data, ~mutate(., Continent = case_when(
Country_Region == "Diamond Princess" ~ "Asia",
Country_Region == "Kosovo" ~ "Americas",
Country_Region == "MS Zaandam" ~ "Europe",
TRUE ~ Continent)
))) -> df_long
map(df_long$data, ~unique(.$Continent))
# 1
df_long %>%
unnest(cols = data) %>%
ungroup() -> df_all
# 2
remove(df, df_long)
# 3
df_all %>%
select(-vars) -> df_all
# 1
df_pop <- read_csv("./data/WPP2019_TotalPopulation.csv")
# summarize(df_pop, across(everything(), ~sum(is.na(.)))) # check NAs
# 2
semi_join(df_pop, df_all, by = c("Location" = "Country_Region")) -> df_pop
# 3
df_pop %>%
mutate(rank_p = rank(-PopTotal, na.last = TRUE),
rank_d = rank(-PopDensity, na.last = TRUE),
PopTotal = (PopTotal*1000)) -> df_pop
df_all %>%
inner_join(df_pop, by = c("Country_Region" = "Location")) -> df_all
df_all
# extract one year
df_all %>%
filter(case_types == "confirmed_US" & as_date(Date) <= as_date("2021-01-22") | case_types == "deaths_US" & as_date(Date) <= as_date("2021-01-22")) -> covid
covid %>%
group_by(Province_State, Lat, Long) %>%
filter(Province_State == "Alabama") %>%
count() ## Lat and Long not the only value per state
covid %>%
filter(Province_State == "Diamond Princess")
library(usmap)
state_map <- us_map(regions = "states")
state_map %>%
distinct(full) %>%
rename("Province_State" = "full") -> USstates
covid %>%
filter(case_types == "confirmed_US" & as_date(Date) == as_date("2021-01-22")) %>%
select(Province_State, County, dailyValues) %>%
group_by(Province_State) %>%
tally(dailyValues) %>%
right_join(USstates) %>%
rename("confirmed" = "n") -> confirmed
library(readxl)
personalIncome <- read_csv(file.choose())
personalIncome
personalIncome <- read_excel(file.choose())
personalIncome <- read_excel("personal_income.xlsx", sheet = 1)
personalIncome <- read_excel("./data/personal_income.xlsx", sheet = 1)
personalIncome
x <- xlsx_cells(personalIncome )
readxl::read_excel(personalIncome)
readxl::read_excel("personalIncome")
readxl::read_excel("./data/personalIncome")
readxl::read_excel("./data/personalIncome.xlsx")
readxl::read_excel("./data/personal_income.xlsx")
readxl::read_excel("./data/personal_income_sheet1.xlsx")
covid %>%
filter(Province_State == "Rhode Island")
anti_join(race$Province_State,covidForRegression$Province_State)
covidForRegression %>%
anti_join(race, by = "Province_State") #-->Check if there are some diff value of state
personalIncome <- readxl::read_excel("./data/personal_income_sheet1.xlsx")
USstates %>%
anti_join(personalIncome, by = "Province_State")
race %>%
anti_join(covidForRegression, by = "Province_State") #-->Check if there are some diff value of state
personalIncome
personalIncome %>%
anti_join(USstates, by = "Province_State")
personalIncome
personalIncome %>%
filter(Province_State == "District of Columbia")
personalIncome %>%
anti_join(USstates, by = "Province_State")
personalIncome %>%
semi_join(USstates, by = "Province_State")
personalIncome %>%
semi_join(USstates, by = "Province_State") -> personalIncome
setdiff(USstates, personalIncome)
setdiff(USstates$Province_State, personalIncome$Province_State)
personalIncome <- readxl::read_excel("./data/personal_income_sheet1.xlsx")
personalIncome
personalIncome %>%
filter(Province_State == "Nebraska")
personalIncome
personalIncome %>%
filter(Province_State == "Nebraska")
personalIncome <- readxl::read_excel("./data/personal_income_sheet1.xlsx")
personalIncome
personalIncome %>%
filter(Province_State == "Nebraska")
personalIncome <- readxl::read_excel("./data/personal_income_sheet1.xlsx")
personalIncome %>%
filter(Province_State == "Nebraska")
personalIncome %>%
semi_join(USstates, by = "Province_State") -> personalIncome
personalIncome
setdiff(USstates$Province_State, personalIncome$Province_State)
personalIncome
covidForRegression_race %>%
left_join(personalIncome, by = "Province_state")
race <- read_csv("./data/2019_state_community_by_race.csv")
race %>%
rename(Province_State = State)->race
covidForRegression %>%
left_join(race, by = "Province_State") -> covidForRegression_race
#race %>%
#anti_join(covidForRegression, by = "Province_State") #-->Check if there are some diff value of state
covidForRegression %>%
left_join(race, by = "Province_State") -> covidForRegression_race
covidForRegression_race
library(readxl)
personalIncome <- readxl::read_excel("./data/personal_income_sheet1.xlsx")
personalIncome
personalIncome %>%
semi_join(USstates, by = "Province_State") -> personalIncome
covidForRegression_race %>%
left_join(personalIncome, by = "Province_state")
covidForRegression_race %>%
left_join(personalIncome, by = "Province_State")
personalIncome
library(readxl)
personalIncome <- readxl::read_excel("./data/personal_income_sheet1.xlsx")
personalIncome %>%
rename(`19_income` = `2019`, `20_income` = `2020`)->personalIncome
personalIncome %>%
semi_join(USstates, by = "Province_State") -> personalIncome
covidForRegression_race %>%
left_join(personalIncome, by = "Province_State")
# setdiff(USstates$Province_State, personalIncome$Province_State) -->check if 51 states there
library(readxl)
personalIncome <- readxl::read_excel("./data/personal_income_sheet1.xlsx")
personalIncome %>%
rename(`19_income` = `2019`, `20_income` = `2020`)->personalIncome
personalIncome %>%
semi_join(USstates, by = "Province_State") -> personalIncome
covidForRegression_race %>%
left_join(personalIncome, by = "Province_State")->covidForRegression_race_income
# setdiff(USstates$Province_State, personalIncome$Province_State) -->check if 51 states there
covidForRegression_race_income
USstates
race <- read_csv("./data/2019_state_community_by_race.csv")
race %>%
rename(Province_State = State)->race
covidForRegression %>%
left_join(race, by = "Province_State") -> covidForRegression
#race %>%
#anti_join(covidForRegression, by = "Province_State") #-->Check if there are some diff value of state
# The 2020 American Community Survey (ACS) 1-year estimates will be released on September 23, 2021.
# Since the 2020 survey does not yet release, we use the 2019 survey here
covidForRegression
library(readxl)
personalIncome <- readxl::read_excel("./data/personal_income_sheet1.xlsx")
personalIncome %>%
rename(`19_income` = `2019`, `20_income` = `2020`)->personalIncome
personalIncome %>%
semi_join(USstates, by = "Province_State") -> personalIncome
covidForRegression %>%
left_join(personalIncome, by = "Province_State") -> covidForRegression
# setdiff(USstates$Province_State, personalIncome$Province_State) -->check if 51 states there
# Personal income [Millions of dollars]
# we do have to pay attention to the level of unit of each variable
covidForRegression
library(rvest)
location_element <- read_html("https://developers.google.com/public-data/docs/canonical/states_csv")
location_element
class(html)
class(location_element)
html_obj <- read_html("https://developers.google.com/public-data/docs/canonical/states_csv")
html_obj
location_element <- html_nodes(html_obj, css = "td , th")
location_text <- html_text(location_element)
location_text
library(rvest)
html_obj <- read_html("https://developers.google.com/public-data/docs/canonical/states_csv")
html_obj
location_element <- html_nodes(html_obj, css = "td")
location_text <- html_text(location_element)
location_text
state_lat_long <- read_csv(".data/statelatlong.csv")
state_lat_long <- read_csv("./data/statelatlong.csv")
state_lat_long
state_lat_long %>%
rename(Province_State = City) %>%
select(-State)
state_lat_long %>%
rename(Province_State = City) %>%
select(-State) -> state_lat_long
setdiff(state_lat_long$Province_State, USstates$Province_State)
setdiff(USstates$Province_State,state_lat_long$Province_State)
personalIncome <- readxl::read_excel("./data/personal_income_sheet1.xlsx")
personalIncome %>%
rename(`19_income` = `2019`, `20_income` = `2020`)->personalIncome
personalIncome
covidForRegression %>%
left_join(state_lat_long, by = "Province_State") -> covidForRegression_location
covidForRegression_location
# setdiff(USstates$Province_State,state_lat_long$Province_State)
covidForRegression %>%
left_join(state_lat_long, by = "Province_State") %>%
select(Province_State, state_lat_long, everything())-> covidForRegression_location
covidForRegression_location
state_lat_long <- read_csv("./data/statelatlong.csv")
state_lat_long %>%
rename(Province_State = City) %>%
select(-State) -> state_lat_long
# setdiff(USstates$Province_State,state_lat_long$Province_State)
covidForRegression %>%
left_join(state_lat_long, by = "Province_State") %>%
select(Province_State, Latitude, Longitude, everything())-> covidForRegression_location
covidForRegression_location
knitr::opts_chunk$set(echo = FALSE)
y_hat
knitr::opts_chunk$set(echo = FALSE)
library(tidyverse)
df <- tribble( ~Y,  ~X1, ~X2,
42.0, 7.0, 33.0,
33.0, 4.0, 41.0,
75.0, 16.0, 7.0,
28.0, 3.0, 49.0,
91.0, 21.0, 5.0,
55.0, 8.0, 31.0)
df
reg <- lm(Y ~ X1 + X2, data = df)
# b
n = nrow(df)
p = length(coef(reg)) # the number of parameter you want to estimate
X = cbind(rep(1,n), df$X1, df$X2) # x as defined above
Y = df$Y # column vector
b0_b2 = solve(t(X) %*% X) %*% t(X) %*% Y # inverse --> solve()
b0_b2
# R^2
summary(reg)$r.squared
# s^2_b
anova(reg)
20.69 * solve(t(X) %*% X)
# H
X %*% solve(t(X) %*% X) %*% t(X)
# SSErr
SSE <- sum(residuals(reg)^2)
SSE
# Y_hat
y_hat = X %*% solve(t(X) %*% X) %*% t(X) %*% Y
y_hat
# e
e = Y - y_hat
e
summary(reg)$r.squared
anova(reg)
20.69 * solve(t(X) %*% X)
b0_b2
# R^2
summary(reg)$r.squared
# s^2_b
anova(reg)
20.69 * solve(t(X) %*% X)
# H
X %*% solve(t(X) %*% X) %*% t(X)
# SSErr
SSE <- sum(residuals(reg)^2)
SSE
# Y_hat
y_hat = X %*% solve(t(X) %*% X) %*% t(X) %*% Y
y_hat
# e
e = Y - y_hat
e
33.9321033 + 2.7847614*(10) -0.2644189*(30)
library(tidyverse)
brand_pre <- read_table("CH06PR05.txt", col_names = FALSE)
brand_pre %>%
rename(yi = `X1`, X1 = `X2`, X2 = `X3`)->brand_pre
brand_pre_reg <- lm(yi ~ X1 + X2, data = brand_pre)
brand_pre_reg
par(mfrow = c(2,2))
plot(brand_pre_reg)
library(car)
ncvTest(brand_pre_reg)
reduced_mod <- lm(yi ~ X1 + X2, data = brand_pre)
full_mod <- lm(yi ~ as.factor(X1) + as.factor(X2), data = brand_pre)
anova(reduced_mod, full_mod)
summary(brand_pre_reg)
confint(brand_pre_reg, level = 1 - 0.10/5)
summary(brand_pre_reg)
deviance(brand_pre_reg)
new_x <- data.frame(X1 = 5, X2 = 4)
predict(brand_pre_reg, newdata = new_x, interval = 'confidence', level = 0.99)
new_y <- data.frame(X1 = 5, X2 = 4)
predict(brand_pre_reg, newdata = new_y, interval = 'prediction', level = 0.99)
confint(brand_pre_reg, level = 1 - 0.01/5)
confint(brand_pre_reg, level = 1 - 0.01)
# s^2_b
anova(reg)
20.69 * solve(t(X) %*% X)
# use r to calculate
anova(brand_pre_reg)
# use r to calculate
sse <-  sum(residuals(brand_pre_reg)^2)
sse
solve(t(X) %*% X)
20.69 * solve(t(X) %*% X)
# use r to calculate
sse <- residuals(brand_pre_reg)^2
sse
# use r to calculate
sse <-  sum(residuals(brand_pre_reg)^2)
sse
dim(brand_pre)
y_hat <- predict(brand_pre_reg, newdata = data.frame(x))
y_hat <- predict(brand_pre_reg, newdata = data.frame(c(X1,X2)))
# use r to calculate
sse <-  sum(residuals(brand_pre_reg)^2)
sse
y_hat <- fitted.values(brand_pre_reg)
cor(brand_pre$X1, y_hat)^2
y_hat <- fitted.values(brand_pre_reg)
cor(brand_pre$X1, y_hat)^2
y_hat <- fitted.values(brand_pre_reg)
cor(brand_pre$yi, y_hat)^2
brand_pre_inter_reg <-  lm(yi ~ X1 + X2, data = brand_pre)
brand_pre_inter_reg
brand_pre_inter_reg <-  lm(yi ~ X1 + X2 + X1:X2, data = brand_pre)
brand_pre_inter_reg2
brand_pre_inter_reg <-  lm(yi ~ X1 + X2 + X1:X2, data = brand_pre)
brand_pre_inter_reg
library(tidyverse)
brand_pre <- read_table("CH06PR05.txt", col_names = FALSE)
brand_pre %>%
rename(yi = `X1`, X1 = `X2`, X2 = `X3`)->brand_pre)
library(tidyverse)
brand_pre <- read_table("CH06PR05.txt", col_names = FALSE)
brand_pre %>%
rename(yi = `X1`, X1 = `X2`, X2 = `X3`)->brand_pre
